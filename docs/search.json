{
  "articles": [
    {
      "path": "index.html",
      "title": "EDS 211: Team Science",
      "description": "EDS 211: Team Science, Collaborative Analysis and Project Management",
      "author": [],
      "contents": "\n\nContents\n1 Schedule\n2 Overview\n3 Office Hours\n4 Grading\n5 Readings\n\n\nIf you want to go fast, go alone. If you want to go far, go together. – African proverb\n\n1 Schedule\n\n\nshow\n\nsource(here::here(\"functions.R\"))\nget_sched() %>% \n  dt_sched()\n\n\n\n{\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"RowGroup\"],\"data\":[[\"Mon, Nov 1\",\"Wed, Nov 3\",\"Mon, Nov 8\",\"Wed, Nov 10\",\"Mon, Nov 15\",\"Wed, Nov 17\",\"Mon, Nov 22\",\"Wed, Nov 24\",\"Mon, Nov 29\",\"Wed, Dec 1\"],[\"1. Introduction\",\"1. Introduction\",\"2. Time & Github Org\",\"2. Time & Github Org\",\"3. Github\",\"3. Github\",\"4. Roadmaps & Burndown\",\"4. Roadmaps & Burndown\",\"5. Productivity & Presentations\",\"5. Productivity & Presentations\"],[\"<a href='https://docs.google.com/presentation/d/1owziy77lGi2mytXoUDj1kyTJIOSFqrOH7I29yDWFlo8/edit#slide=id.gfca83dc967_0_48' target='_blank'>intro<\\/a>\",\"<a href='https://docs.google.com/presentation/d/1iDL4z1qf68SVZPxx2nTtteyVZqo9jGcic6D8-Sudl50/edit#slide=id.p' target='_blank'>plenary<\\/a>\",\"<a href='https://docs.google.com/presentation/d/1t2GFvnEhKcWrs7lSHk29fdCZBhlqx3vjDe2gtKCnJ_U/edit?usp=sharing' target='_blank'>time<\\/a>\",\"<a href='https://docs.google.com/presentation/d/1IGPzY6qqOYRGJaEKN-k9FnQDXCu4OayCHmJZpmNQdMw/edit?usp=sharing' target='_blank'>github-org<\\/a>\",\"<a href='https://docs.google.com/presentation/d/1zbRmMlJk-VBulZVvf9cknzaOhZ3m8rb3hmy9b3BY4-s/edit?usp=sharing' target='_blank'>github-issues<\\/a>\",\"github-projects\",\"<a href='https://docs.google.com/presentation/d/1S6ushMnpTu4ZOzy4CQ4gE123Myhn_i7z8GOZsuXGcRw/edit?usp=sharing' target='_blank'>roadmap<\\/a>\",\"<a href='https://docs.google.com/presentation/d/1xjAVz7kgIAQpO8hVHP4jSYMu1GlWVvwKvZZ_5mLSF7M/edit?usp=sharing' target='_blank'>burndown<\\/a>\",\"<a href='https://docs.google.com/presentation/d/1sIO-tD0P1iInKBhwWzPsVJtebq0EiNu84gz_MclOpRk/edit?usp=sharing' target='_blank'>productivity<\\/a>\",\"presentations\"],[\"<a href='https://bbest.github.io/eds211-team/lab1_proposal.html'     target='_blank'>proposal<\\/a>\",\"\",\"<a href='https://bbest.github.io/eds211-team/lab2_time.html'     target='_blank'>time<\\/a>\",\"<a href='https://bbest.github.io/eds211-team/lab3_github.html'     target='_blank'>github<\\/a>\",\"<a href='https://bbest.github.io/eds211-team/lab3_github.html'     target='_blank'>github<\\/a>\",\"<a href='https://bbest.github.io/eds211-team/lab3_github.html'     target='_blank'>github<\\/a>\",\"<a href='https://bbest.github.io/eds211-team/lab4_roadmap.html'     target='_blank'>roadmap<\\/a>\",\"\",\"<a href='https://bbest.github.io/eds211-team/lab5_burndown.html'     target='_blank'>burndown<\\/a>\",\"\"],[null,null,\"proposal\",\"time\",null,null,\"github\",\"roadmap\",null,\"burndown\"],[null,null,10,5,null,null,15,5,5,null],[\"<a href='https://drive.google.com/file/d/1LJWfJTo4EWcd6Vxyfg7R6GTES-orY-3B/view?usp=sharing'     target='_blank'>Bennett and Gadlin (2012)<\\/a>\",\"\",\"<a href='https://drive.google.com/file/d/16eswlI2SFQpITD1Oqbi7NPDhTm3Xope4/view?usp=sharing'     target='_blank'>Lowndes et al. (2017)<\\/a>\",\"\",\"<a href='https://drive.google.com/file/d/1gt0jrZ3Q6HCqSORb7_L24Twj7WiIlCwO/view?usp=sharing'     target='_blank'>Perez-Riverol et al. (2016)<\\/a>\",\"\",\"<a href='https://drive.google.com/file/d/1ZnAK5c-96B8G_dZkNA3SD6qppEuWz5iA/view?usp=sharing'     target='_blank'>Larson (2019)<\\/a>\",\"\",\"<a href='https://drive.google.com/file/d/1lZvvLdfzq9xnIpF9fxhVAFWl0laFUB4n/view?usp=sharing'     target='_blank'>Bastille et al. (2021)<\\/a>\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Date<\\/th>\\n      <th>Module<\\/th>\\n      <th>Lecture<\\/th>\\n      <th>Lab<\\/th>\\n      <th>Lab\\nDue<\\/th>\\n      <th>Lab\\nPts<\\/th>\\n      <th>Reading<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"rowGroup\":{\"dataSrc\":1},\"columnDefs\":[{\"visible\":false,\"targets\":1},{\"className\":\"dt-right\",\"targets\":5}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\n2 Overview\nWelcome to the Team Science course for the Masters in Environmental Data Science! In this class you’ll learn how to work together on code while managing a project. You’ll apply these techniques to the group project from the course Remote Sensing (EDS 220) and they should help you manage your Capstone group project starting winter quarter. The techniques will help guide three basic questions:\nWhat should I work on next?\nHow long will it take?\nHow do we adapt to change?\nThese basic questions are however deceptively difficult to answer, especially as the size of the team and scope of the project increases.\nWhat should I work on next? You’ll learn ‘agile’ software development techniques to divide work into tasks, which can be assigned to various team members and passed between as work progresses. These tasks can be arranged as cards into columns on a ‘Kanban’ board: horizontally according to status (ToDo, In Progress, Done) or time (next week, next month, …); and vertically based on priority (from most to least important, top to bottom). This overview of who is to do what next will be approached with different tools embracing increasing levels of complexity: a Trello board for basic projects without code, a Github Project to integrate Github Issues associated with code level git commit messages, and ZenHub for adding dependencies between issues and clustering into Epics for use with Roadmaps.\nHow long will it take? You’ll take on the role of an environmental data science consultancy responding to a request for proposal. In the proposal you’ll outline milestones with deliverables and associated dollar amounts based on time estimates and hourly rates of team members. You’ll track time spent on each task and report out at the end with a presentation on time spent over and under expectations, which will help update your understanding for future estimates. You’ll use Clockify to track time and Rmarkdown to generate reports.\nHow do we adapt to change? Changes are inevitable with technical problem solving and client requirements. As Mark Zuckerberg famously said “move fast and break things.” Iterating quickly within the team and getting feedback from all stakeholders are an important part of the development process and the basis for ‘agile’ project management. You’ll compare ‘traditional’ project management with scoping tasks at the outset of the project with a Gantt chart as a ‘waterfall’ diagram showing various phases of the project (eg data collection, analysis and communication). As you proceed with the project you’ll keep track of tasks that expand and shift with some evaluation after the fact through a burndown report. Other ‘agile’ techniques and roles will be reviewed to adapt to change.\n3 Office Hours\nOffice Hours are Mondays 1-2pm at NCEAS. You can swing by the office across from Jamie’s where I’ll be or better yet slot 10 minutes in advance with this calendar:\nAppointment Calendar for Ben’s Office Hours\n4 Grading\nGrades will be based on the following percentages:\nAttendance: 10%\nLabs: 60%\nPresentation: 30%\n5 Readings\n\n\nshow\n\nlibrary(citr)\nmd_cite(\"Bennett\", bib_file=\"eds211-team.bib\")\n\n\n\n\nWeek 1: Bennett and Gadlin (2012) (pdf)\nWeek 2: Lowndes et al. (2017) (pdf)\nWeek 3: Perez-Riverol et al. (2016) (pdf)\nWeek 4: Larson (2019) (pdf)\nWeek 5: Bastille et al. (2021) (pdf)\n\n\n\nBastille, Kimberly, Sean Hardison, Lynn deWitt, Jennifer Brown, Jameal Samhouri, Sarah Gaichas, Sean Lucey, et al. 2021. “Improving the IEA Approach Using Principles of Open Data Science.” Coastal Management 49 (1): 72–89. https://doi.org/10.1080/08920753.2021.1846155.\n\n\nBennett, L. Michelle, and Howard Gadlin. 2012. “Collaboration and Team Science: From Theory to Practice.” Journal of Investigative Medicine 60 (5): 768–75. https://doi.org/10.2310/JIM.0b013e318250871d.\n\n\nLarson, Deanne. 2019. “Best Practices in Accelerating the Data Science Process in Python.” In Introduction to Data Science and Machine Learning. IntechOpen.\n\n\nLowndes, Julia S. Stewart, Benjamin D. Best, Courtney Scarborough, Jamie C. Afflerbach, Melanie R. Frazier, Casey C. O’Hara, Ning Jiang, and Benjamin S. Halpern. 2017. “Our Path to Better Science in Less Time Using Open Data Science Tools.” Nature Ecology & Evolution 1 (6): 0160. https://doi.org/10.1038/s41559-017-0160.\n\n\nPerez-Riverol, Yasset, Laurent Gatto, Rui Wang, Timo Sachsenberg, Julian Uszkoreit, Felipe da Veiga Leprevost, Christian Fufezan, et al. 2016. “Ten Simple Rules for Taking Advantage of Git and GitHub.” Edited by Scott Markel. PLOS Computational Biology 12 (7): e1004947. https://doi.org/10.1371/journal.pcbi.1004947.\n\n\n\n\n",
      "last_modified": "2021-11-29T07:40:49-08:00"
    },
    {
      "path": "lab1_proposal.html",
      "title": "Lab 1. Proposal",
      "author": [],
      "contents": "\n\nContents\nLearning Objectives\n1 Create Group Project Key and Title\n2 Take Notes in Google Docs\n3 Consider Tasks of your Project\n4 Create Simple Project Schedule\n5 Create Detailed Project Schedule\n6 Create Schedule of Deliverables\n7 Write the RFP\n8 Write the Proposal\n9 Submit Lab via Form\n\nLearning Objectives\nNotetaking. Use Google Docs to keep quick flexible notes as you proceed with meetings using headers and table of contents.\nTasks. Break down your project into tasks.\nSchedule of Tasks. Create a simple schedule in Google Sheets using cells as units of time. Create a detailed Google Chart pulling from specific dates in a Google Sheet.\nSchedule of Deliverables. Create a table of deliverables with due date and amount based on schedule of tasks, estimated hours and an hourly rate.\nRFP and Proposal. Write a simple Request for Proposal and a responding Proposal with core elements for submission.\n1 Create Group Project Key and Title\n\nThere are only two hard things in Computer Science: cache invalidation and naming things.\n— Phil Karlton (Netscape “Principal Curmudgeon”; 1947-1997)\n\nThink carefully about what you’d like to call your group project. Come up with:\nTitle\ncamel case, with spaces\nFor instance, “Ocean Health Index.”\nKey\nall lower case, no spaces, possibly an acronym\nFor instance, “ohi.” Ideally, find a key that is not already taken on Github. Since github.com/ohi is already taken, we chose “ohi-science” as the final key. You don’t need to create a new Github organization just yet. We’ll handle that in the Github lab.\n2 Take Notes in Google Docs\nHave one of your project members create a folder named after the project’s key name in Google Drive. Share this folder with all members and the instructor (ben@ecoquants.com).\nAdd a Google Document named “notes | {key}” (swapping out {key} with your project’s Key). (Note that adding the extra project key to the document name makes it show up in the browser tab, which differentiates it from other tabs with documents named simply “notes.”) Add the same name to the top of the document formatted as Title. Add Meetings formatted as Heading 1 and below that today’s date in YYYY-MM-DD format as Heading 2. Between the title and first header add normal text “Contents:” and below that add Table of Contents. For reference, see: Add a title, heading, or table of contents in a document - Computer - Docs Editors Help. Start the first bullet point. Your document should look similar to this:\n3 Consider Tasks of your Project\nNow consider the various Tasks of your project, such as: data acquisition, information extraction and cleaning, data integration, modeling, analysis, interpretation and deployment (Larson (2019)). Try to be as specific as you can. Write these down in your notes as a numbered list.\nData science workflow showing Tasks of development with iteration. Source: Wickham and Grolemund (2017)4 Create Simple Project Schedule\nYour first Gantt chart will simply use cells horizontally as time.\nCreate a new Google Sheet in your project Drive folder named “schedule | {key}” (swapping out {key} with your project’s Key). Name the tab “simple.”\nAdd columns “Task,” dates “Nov 1,” “Nov 8.” Select “Nov 1” and “Nov 8” cells, then click the lower right blue box to drag and fill values to the end of the quarter, “Dec 6.”\nFill out the Tasks column with those specific to your project.\nMake the cell background gray for the estimated work period for each of the Tasks, whereby the start day is given by the column’s date.\nMake the column headers bold and add border lines below the header and to the right of the Task column.\nYou simple Gantt chart should look similar to this:\n\n5 Create Detailed Project Schedule\nFor more complex projects, you might want to display the project schedule with specific dates over time. To do this you’ll create a Google Chart from Task data using dates.\nCreate a new tab called “detailed” in the same “schedule | {key}” Google Sheet. Copy the “Task” column from your “simple” tab to this new one.\nAdd columns “Start Date” and “End Date.” Fill out these dates per Task.\nAdd columns “Start Day” and “Duration.” Calculate the first of these fields according to the dates and fill down values for all Tasks:\nStart Day: =int(B2)-int($B$2). This represents the number of days from the beginning of the project $B$2 that the task starts. Notice how the dollar prefixes for cell $B$2 continue to use the same fixed cell as values get filled down (vs B2 changing to C2, D2, etc.).\nDuration: =int(C2)-int(B2). This represents the number of days for each task.\n\nMove “Start Date” and “End Date” columns to the right of “Start Day” and “Duration.”\nSelect all cells within the “Task,” “Start Day” and “Duration” columns including the headers. From the menu, choose Insert -> Chart. It will default to a “Stacked bar chart.”\nConfigure the chart. In the Chart editor panel on the right, click the Customize tab. Click Series, then click the dropdown menu and Start Day. Enter 0% for Fill opacity to turn off display of this Series. The chart should now resemble a Gantt chart.\nUpdate the Chart and Axis Titles. Double-click on the title at the top of the chart. Type new title “Project Schedule.” Customize the Chart & axis titles so the Horizontal axis title has “Day” for Title text.\nRemove the Chart Legend. Click on the chart and three circles in upper right, Edit chart. Click the Customize tab in the Chart editor panel, then click Legend. Select Position: None.\nIn the end, you should have a chart like so:\n\n6 Create Schedule of Deliverables\nCreate a new tab called “deliverables” in your “schedule | {key}” Google Sheet.\nAdd columns: Deliverable | Date Due | Amount | Hours | Hourly Rate. Make the first 3 column headers (Deliverable | Date Due | Amount) bold and add an underline to be used in the final table, whereas the Hours and Hourly Rate columns are only used to calculate the Amount.\nPopulate the Deliverables and Date Due cells base on outputs from the schedule of Tasks.\nEnter the Hourly Rate of $100 and estimate the number of hours it will take to complete each task here described as deliverables.\nEnter the first cell for the Amount using the equation =D2*$E$2 and fill down:\n7 Write the RFP\nCreate a Google Document simply named RFP (Request for Proposal) with your project key, so “rfp | {key}.” Give it a title summarizing the desired output product and a new line below that with “Request for Proposal” formatted as a Subtitle. Imagine you are the client seeking the analytic output of your Remote Sensing group project. Write one paragraph describing this as a request to solicit bids from environmental data science consultancies.\n8 Write the Proposal\nCreate a Google Document named “proposal | {key}.” This is your environmental data science consultancy’s response to the RFP bidding for the work.\nInclude in your proposal:\nTitle same as RFP with subtitle Proposal.\nDate in the upper right.\nContents with Table of Contents added, similar to Notes. Be sure to refresh the Table of Contents after you add the headers below.\nOverview. Below a Heading 1 of Overview, describe the project summarizing or expanding upon the RFP in a paragraph.\nSchedule of Deliverables. Paste your schedule of deliverables below a Heading 1 of “Schedule of Deliverables.”\nWork Schedule. Include a detailed chart below a Heading 1 of “Work Schedule.” Optional: Expand on each of the tasks with more details in paragraph form below the chart.\nTeam. Below a Heading 1 of Team, provide a bulleted list of each team member with First Last (UCSB email address) and a one sentence description of relevant experience. Provide the rate for each team member as $100/hour.\n9 Submit Lab via Form\nEvery team member must submit links to the lab outputs via the following Google Form using your UCSB email:\nSubmission for Lab 1. Proposal\n\n\n\nLarson, Deanne. 2019. “Best Practices in Accelerating the Data Science Process in Python.” In Introduction to Data Science and Machine Learning. IntechOpen.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1st edition. Sebastopol, CA: O’Reilly Media.\n\n\n\n\n",
      "last_modified": "2021-11-08T07:32:28-08:00"
    },
    {
      "path": "lab2_time.html",
      "title": "Lab 2. Time",
      "author": [],
      "contents": "\n\nContents\nLearning Objectives\n1 Setup Clockify\n1.1 Login with UCSB Account\n1.2 Create Project, Tasks (lead only)\n1.2.1 Add Tasks with Hourly Estimates\n\n1.3 Invite Team Members (lead only)\n1.4 Install Extra Software\n\n2 Enter Time\n2.1 Manually (past) and with Timer (present) per Project Task\n\n3 Create Summary Report\n4 Create Personal Time Tracking Website\n4.1 Create Personal Github Repo\n4.2 Clone to Desktop\n4.3 Save Clockify API Key outside Repo\n4.4 Create index.Rmd\n4.5 Setup Github Pages for your Repo\n\n5 Continue Tracking Time on your Project\n6 Submit Lab via Form\n\n\nLost time is never found again.  – Benjamin Franklin\n\nLearning Objectives\nTrack Time with Clockify. Time can be tracked in a simple spreadsheet, e.g. with columns: date, duration (hours), project, task and description. Even easier would be the ability to click a timer on and off with the ability to select project and task from a drop-down list and enter a textual description. For this timer app, we’ll use clockify.me with the many features described in the time lecture.\nSetup Project, Tasks, Team. Setup your project with tasks, including estimated time, and team members.\nEnter Time Manually or with Timer. Use any of the Clockify apps (web / browser extension / mobile app) to start and stop the timer, or enter time manually. Select the Project and Task before entering Description and possibly adding a Tag.\nGenerate Project Reports. Track progress of time spent on tasks, especially relative to initial estimate. Generate Summary and Detailed reports for your project based on day, team member, task, tag, etc.\nUse the API with an R package. A simple table of time entries can be extracted using Clockify’s application programming interface (API), which is easy to access with the R package clockify.\nBuild Personal Website of Time Tracked. Create a website using Github Pages from an Rmarkdown document in a new Github repository for reporting your time. The idea is for you to flexibly manipulate the data for your reporting needs rather than rely on Clockify’s interfaces.\n1 Setup Clockify\n1.1 Login with UCSB Account\nVisit clockify.me and click on GO TO TRACKER in upper right. Login with your UCSB Google account.\n1.2 Create Project, Tasks (lead only)\nChoose a team leader to enter a new Project with Tasks you previously entered in the detailed Schedule from Lab 1. Proposal. Be sure to have only a single project member enter this once to avoid duplication of projects (with different identifiers but possibly the same name) once you subsequently invite team members.\nCreate a project on the Project page per Managing projects and clients – Clockify Help. Set the billable rate to $100 per hour.\n\n1.2.1 Add Tasks with Hourly Estimates\nUse the hours you estimated per Deliverable from the first lab to enter for the Estimate per Task. You’ll first need to go to your Project Settings and set the Time estimate to be Task based. Then under the TASKS tab, you can ADD the tasks and Set the time for each.\n\n1.3 Invite Team Members (lead only)\nAdd Team Members using UCSB emails, per Inviting and managing users – Clockify Help.\n\n1.4 Install Extra Software\nInstall the Desktop app, Browser Extension and optionally Mobile app from clockify.me/apps.\n2 Enter Time\n2.1 Manually (past) and with Timer (present) per Project Task\nNow that you have Clockify setup for you and your Project, you’re ready to track time. Use the website or installed apps to track time by creating entries with Descriptions that include the letters #testing (so we can filter out these bogus entries later):\nAdd time entries for EACH project Task both:\nManually for last month of October in the past; and with\nTimer for a few seconds in the present.\n\n\n3 Create Summary Report\nBy User (lead only)\nNow create a Summary Report per Team Member for October & November, per Summary report – Clockify Help.\n\nBe sure to share the report publicly, per Sharing reports – Clockify Help. All team members will submit this URL for the lab.\n\n4 Create Personal Time Tracking Website\n4.1 Create Personal Github Repo\nCreate a Github repository called time in your Github user space (e.g. github.com/bbest/time for me), per Create a repo - GitHub Docs.\n4.2 Clone to Desktop\nFrom RStudio, clone the GitHub repository to your computer as a new Project, per Chapter 12 Connect RStudio to Git and GitHub | Happy Git and GitHub for the useR.\n\n4.3 Save Clockify API Key outside Repo\nVisit your Profile settings (clockify.me/user/settings) and record your private API key into a text file on your computer (e.g. ~/private/clockify_api-key.txt), but outside your publicly accessible Github repository.\n4.4 Create index.Rmd\nInclude the following R chunk:\n\n\nshow\n\n# get libraries\nif (!require(librarian)){\n  install.packages(\"librarian\")\n  library(librarian)\n}\nlibrarian::shelf(\n  clockify, dplyr, DT, glue, lubridate, readr)\n\n# CHANGE THESE VARIABLES!\napi_txt <- \"~/private/clockify_api-key.txt\"\napi_txt <- \"~/My Drive (ben@ecoquants.com)/private/clockify-api-key_ben@ecoquants.com.txt\"\nproject_name <- \"ohi-science\"\n\n# use API key to authenticate\nCLOCKIFY_API_KEY <- readLines(api_txt)\nset_api_key(CLOCKIFY_API_KEY)\n\n# get data\nd_projects <- projects() %>% \n      select(project_id, project_name)\nd_users <- users() %>% \n      select(user_id, user_name)\nd_times <- time_entries(concise = F) %>% \n  left_join(\n    d_projects, by = \"project_id\") %>% \n  left_join(\n    d_users, by = \"user_id\")\n\n# show table\nd_times %>% \n  filter(\n    project_name == !!project_name) %>% \n  select(\n    user_name, project_name, \n    time_start, duration, description) %>% \n  arrange(user_name, project_name, time_start) %>% \n  datatable() %>%\n  formatRound(columns=c('duration'), digits=3)\n\n\n\nKnit the document to create index.html, the default web page served for any given folder. The rendered output table should look something like this:\n\n4.5 Setup Github Pages for your Repo\nSetup your Github repo to serve the newly generated index.html choosing the root folder, per Configuring a publishing source for your GitHub Pages site - GitHub Docs.\n\nCopy the published website URL and paste into the Repository’s About settings after clicking the Gear icon in upper right of your main Github repo website.\n5 Continue Tracking Time on your Project\nContinue tracking time as you work on your Remote Sensing group projects. Be sure to choose a Task. Later we’ll subdivide your initial Tasks into Github Issues and track time specific to those.\nNext lab we’ll start into using Github by creating a Github organization where you’ll report time for the whole project. We’ll also setup a Github Action to generate a table and charts on a regular basis, such as daily or weekly.\n6 Submit Lab via Form\nPlease submit the link to the Clockify project report and your personal time tracking website on Github via the following Google Form using your UCSB email:\nSubmission for Lab 2. Time\n\n\n\n",
      "last_modified": "2021-11-24T05:32:52-08:00"
    },
    {
      "path": "lab3_github.html",
      "title": "Lab 3. Github",
      "author": [],
      "contents": "\n\nContents\nLearning Objectives\n1 Create Github organization [lead only]\n1.1 Edit All Invited People to make Owner [lead only]\n1.2 Accept invitations [all members]\n\n2 Fork samanthastevenson/{repo} into {org}/notebook [lead only]\n3 Clone {org}/notebook onto your machine [all members]\n4 Background: Github Workflows\n4.1 Simple: push & pull\n4.2 Contribute: fork & pull request\n4.3 Sandbox: branch & merge\n4.4 Pro: branch, pull request & merge\n\n5 Create website repo {org}.github.io [lead only]\n5.1 Create RStudio Project\n5.2 Simple push\n5.3 Create Rmarkdown website\n5.4 Setup Github Pages to serve website\n\n6 Contribute to eds211-team [all members]\n7 Sandbox on {org}.github.io [all members]\n8 Handle Merge Conflict on Github [all members]\n8.1 Create new branch test-conflict in {user}/time repo\n8.2 Insert ## Welcome header in test-conflict branch\n8.3 Insert ## Hello header in main branch\n8.4 Create Pull Request: main <- test-conflict\n\n9 Use Github Issues\n9.1 Create Issue in {user}/time [all members]\n9.2 Work through Tasks [all members]\n9.3 Create Issues from Project Tasks in {org}/notebook [lead only]\n\n10 Create Github Milestones in {org}/notebook [lead only]\n11 Use Github Projects (Beta) [lead only]\n11.1 Create Project (Beta) Plan under {org}\n11.2 Customize the Plan Project\n\n12 Track Time on Github Issues\n13 Submit Lab via Form [all members]\nFurther Reading\nGit & Github\nMarkdown in Github\n\nRStudio with Git & Github\nRmarkdown\nRmarkdown websites\n\n\n\nLearning Objectives\nCreate a Github Org. Create a new Github organization based on your Project Key (e.g. ohi-science). This will be your team’s organization and repositories within for producing deliverables, including a website.\nFork Repo into Github Org. Fork the template final project repository EDS220_Fall2021_FinalProjInfofrom from samanthastevenson into your organization. Forking makes a copy of the original repository into a new owner.\nUnderstand Github Workflows. A Simple workflow assumes you have read and write access to a repository. You can synchronize changed files (from using git commit) between your computer and Github by simply using git push and git pull. If you don’t have write access, i.e. unable to perform a git push, then you need to make a copy of the repo with a Github fork into your own writable owner space, i.e. under your Github user or a Github organization to which you can write. This is the Contribute model and what powers contributions from community members in the open-source world. Even if you have write capabilities on the repository, you may wish to make a copy with git branch to avoid merge conflicts with others while you’re working on some new feature or bug fix. This is the Sandbox model. Either the forked or branched copy can be synchronized with the original via a pull request from the contributor and a merge from the origin’s owner.\nCreate & Share Website Repo using Github Pages. The default website repo under a Github organization named exactly {org}.github.io is what gets served via the URL https://{org}.github.io once Github Pages gets turned on in the repo Settings. You’ve already done this in the MEDS program for your Github {user} space, i.e. https://{user}.github.io.\nBuild Rmarkdown Website. This simple website uses a _site.yml file to apply consistent navigation bars and defaults to all pages. The original *.Rmd files render to *.html for serving online. The default web page for any folder is the index.html.\nContribute Workflow: Fork & Pull Request. After you fork any public repo into your own space, you can make changes and contribute those back to the original repo with a pull request, which can then be incorporated with a merge by the original repo owner. This is how the open-source world works to incorporate code from the community. You’ll use this technique to contribute towards a class directory of projects in the course repo bbest/eds211-team.\nSandbox Workflow: Branch & Merge. Create a branch in RStudio and merge it in the Terminal.\nHandle Merge Conflicts. Conflicts are inevitable when collaborating with others, so knowing how to deal with them is a key part of the process. Git commits of two different users might operate on the same line(s) of code, which need to be reconciled when merging.\nUse Github Issues. Tihub Issues allow you to track progress on an issue with a thread of comments and any Git commits between. In the comments Github flavored markdown allows you to reference other issues (e.g. #2), Github commit messages or Github users (e.g. @bbest), who even get notified by email.\nUse Github Milestones. Github Milestones allow you to cluster issues into a deadline date. Milestones only work per repo and are anticipated to be superseded by Github Timelines in the future for working across repos for a given Github owner.\nUse Github Projects. These Kanban boards provide the high level view of tasks organized by priority vertically and horizontally over time. You can filter by Assignee and with the new Project Beta even add your own fields and view as a table.\n1 Create Github organization [lead only]\nThe Github Organization you create will become the {owner} of the project’s main {repo}. Remember, all of Github is organized according to github.com/{owner}/{repo}.\nHave only one group project member follow instructions to Create a new organization from scratch - GitHub Docs. Even more simply, choose + and New organization from upper right of github.com once you’re logged in:\n\nOrganization account name:\nThis should be your Project Key from EDS 211 - Lab 1. Proposal, e.g. ohi-science).\nContact email:\nThis should be the email associated with your Github account.\nThis organization belongs to:\nChoose My personal account.\nAdd organization members:\nAdd the Github usernames of the rest of your team plus instructors for both classes:\nsamanthastevenson (EDS 220)\nbbest (EDS 211).\n\nWhat do you spend time on most day-to-day?\nI chose: Writing code and Planning projects.\nHow many people do you expect to actively work within this GitHub organization?1 -5\nWhat type of work do you plan to use this organization for?Education projects\nWhat do you expect to do on GitHub in the next seven days?Collaborate on code; Plan and track work; Set up CI/CD\n[Continuous Integration / Continuous Delivery such as Github Action to automatically render Rmarkdown to html on website.]\nDo you have an existing repository for your project?No\n1.1 Edit All Invited People to make Owner [lead only]\nNow the lead needs to visit the People tab of the organization, visit Pending invitations and make everyone an Owner (gear icon, Edit invitation, Owner, Update invitation).\n1.2 Accept invitations [all members]\nAll the rest of the team members need to accept the invitations, which can be done by directly visiting https://github.com/{org}/{repo}/invitations.\n2 Fork samanthastevenson/{repo} into {org}/notebook [lead only]\nNext one person from your group will fork the template repo samanthastevenson/EDS220_Fall2021_FinalProjInfofrom where {owner} = samanthastevenson into your new Github organization (e.g. {owner} = ohi-science from Project Key of EDS 211 - Lab 1. Proposal).\nFollow instructions from Fork the repo - GitHub Docs:\nFrom: samanthastevenson/{repo}  The template Python notebook repository samanthastevenson/EDS220_Fall2021_FinalProjInfofrom that Dr. Stevenson created for your Remote Sensing (EDS 220) group project.\nTo: {org}/{repo}  The organization should be what you created in the previous step.\nPlease rename the repo from EDS220_Fall2021_FinalProjInfofrom to notebook, which can be done under the repo’s  Settings, Repository Name.\n3 Clone {org}/notebook onto your machine [all members]\nClick on the RStudio Terminal pane where you enter shell commands to the operating system (NOT the RStudio Console where you enter R commands). Enter the following command to git clone the repo onto your machine.\n# Change directory (cd) to where you want to store the repo on your machine\n# Be sure that it is OUTSIDE any other repo\ncd ~/github\n\n# clone the repo onto your machine\ngit clone https://github.com/{org}/notebook.git\n4 Background: Github Workflows\nThere are a variety of ways to interact with a Github repository, or REPO for short, which is a collection of files, possibly organized within folders. On Github every repo is associated with an OWNER, which can be a Github organization or a Github user. Repos are consistently found at github.com/OWNER/REPO.\nIf you have write permissions to the repo, then you can git push changes to it directly. These changes are always first packaged as a set of file differences by a git commit that requires a message.\nIf you do not have write permissions to the repo, then you need to Github fork that repo into your own user-writable space (user or organization). After you make changes to the files in your user-writable repo (with git commit and git push), you can then request those changes be pulled into the original repo with a Github pull request.\nFurthermore, you can git branch a snapshot of the repo files into a sandbox for continuing to make changes, such as to fix a bug or implement a new feature. This branch won’t affect the main branch until you’re ready to git merge those changes, so it isolates development.\nThese aspects give rise to different workflows with increasing complexity that we’ll incrementally try out with exercises, so you can become comfortable managing your own code, contributing to other open-source projects, and working on a set of code without trampling on other people’s work.\n\n\nshow\n\nicon_down   <- icons::fontawesome$solid$`arrow-down`\nicon_up     <- icons::fontawesome$solid$`arrow-up`\nicon_right  <- icons::fontawesome$solid$`arrow-right`\nicon_cloud  <- icons::fontawesome$solid$cloud\nicon_plus   <- icons::octicons$plus\nicon_pc     <- icons::octicons$device_desktop\nicon_dl     <- icons::octicons$download\nicon_ul     <- icons::octicons$upload\nicon_commit <- icons::octicons$git_commit\nicon_pull   <- icons::fontawesome$solid$`cloud-download-alt`\nicon_push   <- icons::fontawesome$solid$`cloud-upload-alt`\nicon_merge  <- icons::octicons$git_merge\nicon_fork   <- icons::octicons$repo_forked\nicon_pr     <- icons::octicons$git_pull_request\nicon_clone  <- icons::octicons$repo_clone\nicon_branch <- icons::octicons$git_branch\n\n\n\n4.1 Simple: push & pull\nThe simplest workflow for tracking file changes is to simply git push changes into your Github repo, assuming you have write permissions to that repo. If you’re working with anyone else or editing on more than one computer, then you’ll want to git pull changes at the beginning of each session to capture changes and minimize potential conflicts before proceeding with any edits and subsequent git commit and git push commands.\nThe exact steps can be described in the table below. After the Github create repo step, you git clone it to get a copy of it onto your machine (with the hidden .git folder containing the configuration). Then you make changes on files and package differences with git commit, which requires a message every time and can happen offline. You’ll need to be online to then run git push to publish those changes back to the Github repo. Then before subsequent changes, you’ll want to update your machine with a git pull.\nrepo location\ninitialize \nedit \nupdate \ngithub.com/OWNER/REPO\ncreate \n\n\n~/github/REPO\nclone    \ncommit , push \npull \n4.2 Contribute: fork & pull request\nIf you don’t have write access to a Github repo, such as with any open-source project, then you can Github fork somebody else’s repo into your own user-writable space (i.e. OWNER being a Github user or organization) where you have write permissions. There you can make changes (using git commit and git push). When you’re ready to submit changes to the original repo, you make a pull request queuing these changes up for the owner(s) of the original repo to review and accept with a merge, reject or ignore. Github facilitates the conversation that may follow, including the ability to update the pull request before performing the final merge.\nrepo location\nUSER permission\ninitialize \nedit \nupdate \ngithub.com/OTHER/REPO\nread only\n\nmerge \n\ngithub.com/OWNER/REPO\nread + write\nfork \npull request \npull request , merge \n~/github/REPO\nread + write\nclone    \ncommit , push \npull \n4.3 Sandbox: branch & merge\nEven if you’re able to write directly to the repo, you may be collaborating with others and not want to step on their proverbial coding toes. By performing a git branch, you’re taking a snapshot of the files and isolating them into your own sandbox. For instance let’s say you’re working on a new feature, then you might call your branch generically new-feature. Subsequent changes to the files in the Github repo (with git commit and git push) do not then affect the main branch until a git merge is executed to fold these changes of new-feature into the main branch.\nrepo location\nUSER permission\ninitialize \nedit \nupdate \ngithub.com/OWNER/REPO branch: main\nread + write\n\n\n\n~/github/REPO branch: main\nread + write\nclone \nmerge , push \n\n~/github/REPO branch: new-feature\nread + write\nbranch    \ncommit \npull \nThe scenario above shows the branch and merge happening locally, but you can also execute these on Github. The RStudio IDE provides the ability to create a new branch locally, but then to perform the git merge you need to do this in its Terminal.\n4.4 Pro: branch, pull request & merge\nExtending the Sandbox workflow to full “professional” status, even if you have the administrative ability on the repo to perform a git merge you may wish to first advertise your proposed file changes to other contributors with a pull request. This then allows others to review and discuss changes before an admin then performs the final git merge. This is the recommended workflow described in Understanding the GitHub flow · GitHub Guides:\n\nWe want go over this entire workflow in this lesson, but it simply combines all the techniques above.\n5 Create website repo {org}.github.io [lead only]\nNow one person from your group will create a Github repository for your project’s website. Github Pages uses owner/repository {owner}/{owner}.github.io to host the owner’s website at https://{owner}.github.io where {owner} can be either a Github username or organization. All other repositories, i.e. {owner}/{repo}, can also have websites served via Github Pages as https://{owner}.github.io/{repo}.\nThis repo will contain the source code of an Rmarkdown website that will host the online landing site for your group project.\nWith your web browser, sign into Github.com and visit your Github organization (i.e. https://github.com/{org}) and Create a repository called {org}.github.io, where {org} is your Project Key from Lab 1.\n\nPlease tick the box to Add a README file, which gets generated from the Description you should also fill out with something like group project website for [EDS 211](https://bbest.github.io/eds211-team). (Note the use of markdown for a link.)\nYou should now see this repo at https://github.com/{org}/{org}.github.io.\nNotice that the only file in the repo so far is the README.md, which is in markdown format (.md) and its contents are displayed directly below, which is the special case for any README.md file in a Github folder. Clicking on the pencil icon to edit, reveals the source for this file.\nClicking on the Preview tab shows the formatted result. Note how the # is used to create a header.\nFor more on formatting text with markdown within Github, check out Mastering Markdown · GitHub Guides.\n5.1 Create RStudio Project\nNext, you’ll use RStudio to initialize this website repo in two important ways:\nYou’ll let RStudio run git clone to copy the git repository onto your machine containing the README.md and importantly a hidden folder .git/ which contains all file history and the configuration on where to synchronize files, i.e. Github.\nBy creating an RStudio Project, you’ll create an {org}.github.io.Rproj file. This will be an executable that you can double-click on from Windows Explorer or Mac Finder that will open RStudio and set the working directory to that containing folder. This assures that others who similarly open the project will start with the same working directory, so relative paths to other files in the repo will work regardless of where that repo lives on an individual machine. This is important for making your R code portable for others to use.\nFrom RStudio menu File -> New Project…\n\nChoose Version Control -> git and enter the Repository URL with the .git extension. This Repository URL is also easily copied into your clipboard from your web browser by clicking on the green Code button of your new repository (i.e. https://github.com/{org}/{org}.github.io):\n\nThen paste (Ctrl + V) into the Repository URL field of the form.\nI chose to Create the project as a subdirectory of ~/github which means my home directory (~) and subfolder github, but you can create it wherever makes sense on your computer.\nIf it all works correctly then you should see the files downloaded and showing up in the Files pane of RStudio. If RStudio is configured correctly to work with Git, then you should also see a Git pane.\nBesides the desired RStudio Project file {org}.github.io.Rproj, you should also see the .gitignore. This file describes files that git should ignore and so not prompt for asking whether to track with version control. If you open the .gitignore file in RStudio, you see it’s a simple text file listing hidden files (i.e. those starting with a . and not normally shown in Windows Explorer or Mac Finder) that RStudio uses.\n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\n5.2 Simple push\nNote that in the Git pane, the yellow box question marks under Status next to .gitignore and {org}.github.io.Rproj indicate these files are not known to the version control system (and asking should they be?). Ticking the boxes under Staged changes the Status to a turquoise A for added.\nNow click the Commit button in the Git pane to open the Review Changes dialog window. Every commit requires a message.\nClick the Commit button in the Review Changes dialog window. Close this dialog. Note how now “Your branch is ahead of ‘origin/main’ by 1 commit”. The previous git commit operation happened only on the local machine. The “origin” is Github and “main” referring to the main branch.\nNext, you need to Push these changes by clicking on the button in the upper right.\nYou should now see these two new files showing up in your repo at https://github.com/{org}/{org}.github.io. These files are displayed with the filename, most recent commit message associated with any changes and the time since last update.\n5.3 Create Rmarkdown website\nFollowing guidance from 10.5 rmarkdown’s site generator | R Markdown: The Definitive Guide, create a _site.yml by going to RStudio’s menu File -> New File -> Text File and paste the following:\nname: \"{org}\"\nnavbar:\n  title: \"{org}\"\n  left:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\noutput_dir: \".\"\nBe sure to replace {org} with your organization’s Project Key, e.g. ohi-science. Save this file as _site.yml.\nNext create your index.Rmd with this simple content:\n---\ntitle: \"Welcome\"\n---\n\nHello, Website!\nAdd another page about.Rmd:\n---\ntitle: \"About\"\n---\n\n## Team Members\nFinally, render the website by running the following in your R Console:\nrmarkdown::render_site()\nYou might need to install the package rmarkdown, which you can do from RStudio’s Packages pane, Install button and typing “rmarkdown”.\nThe Viewer pane now shows the rendered html. Also notice the unversioned files. Let’s get these onto our Github repo by going into the Git pane like previously, ticking the Staged boxes, clicking Commit, adding a message like “initial website”.\nClick on Commit in the dialog. Close the Git Commit window and then click on Push so your branch is not ahead of the origin Github.\nYou should now see these new files showing up in your repo at https://github.com/{org}/{org}.github.io.\nNext, let’s get these files served as a website.\n5.4 Setup Github Pages to serve website\nGithub Pages allows you to serve up simple websites from your Github repo. Let’s turn on this feature by visiting the Settings tab in https://github.com/{org}/{org}.github.io. Then click the Pages menu from the left navbar, choose Branch: main, folder / (root).\nClick Save. You should now see that the site is “ready to be published”.\nYou should now be able to visit the website URL:\nhttps://{org}.github.io\nNotice how the URL is a subset of your Github repo URL:\nhttps://github.com/{org}/{org}.github.io\nFor easily referencing the website, I recommend returning to the Github repo https://github.com/{org}/{org}.github.io, clicking the upper right About  and adding it to the Website entry.\nYou should now see a handy link to get to your website.\n6 Contribute to eds211-team [all members]\nSo far you’ve been using the Simple workflow to synchronize repos between Github and your local machine with git push and git pull. Next, you’ll learn how to contribute towards a repo for which you don’t have write permissions by performing a fork and pull request, i.e. the Contribute workflow.\nYou don’t have write permissions to the /bbest/eds211-team repo where these course materials are stored. The task is to contribute to this repo with the sparset amount of information, an empty file indicating your project organization on Github and your Github username under the existing projects/ folder, eg projects/ohi-science/bbest.\nTo do so, please visit github.com/bbest/eds211-team and in the upper right, click Fork .\nNext, choose your Github USER name as the owner into which this repo should be forked.\nNotice how the URL changed from github.com/bbest/eds211-team to github.com/{user}/eds211-team.\nYou now have write permissions on this repo.\nYou could proceed with cloning the repo onto your local machine, making changes there with git commit and pushing to Github with git push, however we’ll take care of this directly through Github web interface.\nVisit the projects/ folder of your forked repo. On the right click Add file, Create new file. Enter the exact name of your group project’s Github organization (upper/lower case matters) and a forward slash (to denote a folder). Then add your exact Github username, e.g.:\n\nYou do not need to enter anything in the content of the file. Simply click the green Commit new file button, which is the web equivalent of git commit (and git push since it’s already on Github.com).\nYou’ll notice that this branch is “1 commit ahead of eds211-team:main”. Click on Contribute, Open pull request.\n\nYou should be taken to a screen asking for confirmation where you chould click on Create pull request. Normally, you’d leave a comment explaining what this pull request is for (but it’s obvious enough in this case). Click on the final Create pull request. Now you should be taken to the origin github.com/bbest/eds211-team (NOT your {user} forked copy) and under the Pull requests see yours.\n\nThe image above shows a Merge pull request since I have admin privileges on this repo. You would NOT so would see it grayed out (or similar).\nGood job! Nothing left for you to do except wait for me (as admin of this repo) to click on Merge pull request.\n7 Sandbox on {org}.github.io [all members]\nNext, you’ll level up your git skills by isolating development of your code in a new branch, which is like a Sandbox separate from the main branch. Your task is to simply add your name to the About page.\nPlease open your {org}.github.io.Rproj RStudio project where your website is hosted. Notice that in the upper right of RStudio you get Project shortcuts to quickly navigate to them. Or you could always double-click on the *.Rproj file from your file explorer application (Windows Explorer or Mac Finder).\nIn RStudio’s Git pane click on the New Branch button and enter a Branch Name with your username, e.g. add-bbest:\n\nClick Create. You should now see your new branch. Notice how when you click on the dropdown of branches you see both LOCAL and REMOTE: ORIGIN (as in on Github) versions.\nNext, simply edit about.Rmd and add a bulleted list item with your name linked to your Github profile below ## Team Members, e.g.:\n- [Ben Best](https://github.com/bbest)\nNow you’re ready to Commit and Push your changes. Once you’ve done that, please visit https://{org}.github.io/{org}.github.io with your web browser. Notice that about.Rmd is still the old Rmarkdown page without your name added. You simply need to select the add-{user} branch to see those files in their own little sandbox.\nReturning to RStudio, you’re ready to git merge the changes in the rmd-website branch to the main branch. In RStudio’s Git pane switch back to the main branch.\nRStudio doesn’t provide a user interface to run the git merge command so you’ll have to do this in RStudio’s Terminal pane by entering:\n# be sure to change this to your actual branch name\ngit merge add-{user}\nYou’ve now merged your LOCAL changes from the add-{user} branch to the main branch, and see in the Git pane that “Your branch is ahead of ‘origin/main’ by 1 commit.” This means that you’re ready to git push them to the ORIGIN on Github by running good ol’ Push.\nNow at last you should see these file changes showing up at https://{org}.github.io/{org}.github.io.\nIt might take a minute or so before they show up on your website at https://{org}.github.io. This is because Github Pages were originally designed to render static webpages with some templating capability (e.g. a common navigation menu) using Jekyll. To speed up rendering and disable Jekyll create an empty text file called .nojekyll in the source of the Github Pages folder, in this case the root folder of the repo. On a Mac, you can run this command in Terminal:\ntouch .nojekyll\nBe sure to Commit and Push these changes to Github.\n8 Handle Merge Conflict on Github [all members]\nYou can also perform a merge of a branch on Github with a pull request (vs previously more directly with git merge in the Terminal). If there’s a conflict, Github provides a convenient text editor to resolve any conflicts. You will intentionally create a conflict between two branches and merge them on Github.\nYou’ll use the time repo you created in Lab 2. Time to play with handling a merge conflict.\n8.1 Create new branch test-conflict in {user}/time repo\nPreviously you created a new branch in RStudio GUI that sends the git branch command to the Terminal. Now you’ll create a repo branch via Github. Let’s use the personal repo {user}/time you created in Lab 2.\nVisit https://github.com/{user}/time in your web browser. To create a new branch click on the button with branches in the upper left of the default < > Code tab. The default branch selected is main. Enter test-conflict and select Create branch: test conflict from main:\n\n8.2 Insert ## Welcome header in test-conflict branch\nFrom the previous step you should notice getting switched over to the new branch test-conflict based on the branch selected dropdown in the upper left.\nClick on index.Rmd and click the pencil icon to insert the following:\n## Welcome\nScroll down and notice enter a message under the Commit changes header of “+ Welcome”:\n Click on the green Commit changes button. Since you’re already on Github, you don’t need to Push.\n8.3 Insert ## Hello header in main branch\nWhile still viewing the index.Rmd file in Github, switch to the main branch. You should notice that the ## Welcome header is absent.\nClick on the pencil icon to insert a different greeting in the same location as the previous ## Welcome:\n## Hello\nScroll down and notice enter a message under the Commit changes header of “+ Hello”. Click on the green Commit changes button.\n8.4 Create Pull Request: main <- test-conflict\nNow visit the Pull requests tab of your time repo. You might notice a suggestion to Compare & pull request the test-conflict branch since Github noticed recent changes there.\n\nSo you know how to create one regardless of prompting, click on the New pull request button.\n\nSelect the test-conflict branch. Notice how it says it Can’t automatically merge..\n\nClick Create pull request. Let’s give this pull request the title Hello (main) <- Welcome (test-conflict) to remind ourselves what’s updating what. Because we intentionally created a conflict on the same line of code, you should see the following warning.\n Click the button to Resolve conflicts.\n\nNotice how you are now presented with files on the left pane and an editor to the right with highlighted lines to resolve and the ability to click on Prev and Next if we had multiple conflicts.\nThe conflicts are presented by comparing one branch starting with <<<<<<< {branch1} and ending with the other >>>>>>> {branch2} seperated by =======.\n<<<<<<< test-conflict\n## Welcome\n=======\n## Hello\n>>>>>>> main\nSo if we want to go with the ## Welcome header, reduce the lines above to simply:\n## Welcome\nAnd Mark as resolved. Then click on the green Commit merge button. You should then see the option to finally Merge pull request.\n\nClick on Merge pull request and Confirm merge.\n\nCongratulations! Finally delete the branch which is no longer needed.\n9 Use Github Issues\nNext, you’ll learn how to create and use Github Issues. Github Issues allow you to discuss tasks, whether fixing a bug or creating a feature, as a thread of comments. They can be assigned to Github users on your team and organized with labels, Milestones and Projects (up later).\n9.1 Create Issue in {user}/time [all members]\nPlease again visit your personal repo https://github.com/{user}/time that you created in Lab 2. Click on the Issues tab and click the green New issue button.\nGive it the following Title:\ntesting Github Issue features\nAnd add the following into the initial commment:\n## Github Issue Basics\n- [x] Create an issue\n- [x] Create this task list in initial comment of issue\n- [ ] Convert the following two tasks into issues:\n  - [ ] Assign user\n  - [ ] Add new label\n- [ ] Add emoji reaction to a comment\n\n## Github Flavored Markdown in Issue Comments\n- [ ] Paste a screenshot into a comment\n- [ ] Reference lines of code with a canonical URL\n- [ ] Add a fenced R code block\n- [ ] Mention a Github user on your team\n- [ ] Use emoji in a comment\n\n## Reference Issues\n- [ ] Mention in issue comment another issue that is in the same repo\n- [ ] Mention in issue comment another issue that is in a different repo\n- [ ] Mention in `git commit` message an issue in the same repo\nClick the green button Submit new issue.\nPlease notice a couple things after you initially Create a Github Issue:\nYou should see that the first issue you created here is #2, not #1. That’s because Pull Requests in Github, including the one you created in Step 8.4 Create Pull Request: main <- test-conflict, count as a Github Issue. They similarly allow a conversation to happen between successive comments and possible code changes wrapped in git commits.\nThe initial two tasks were already checked by using - [x] instead of - [ ]. You can reorder the items in the Github Task List by dragging items up/down, even between headers.\n9.2 Work through Tasks [all members]\nPlease next accomplish each task and check the task in the issue’s list. Note the following:\nConvert the following two tasks into issues:. You can convert a task to an issue by hovering over the task and clicking the [dot in a circle] icon in the upper-right corner of the task.\nAssign user. When trying to assign a Github User to an Issue you won’t have any users available in your {user}/time repo. Instead, you’ll do this in your {org}/notebook repo later. So for this issue Assign user converted from a task, go ahead and assign the label wontfix and then Close issue with comment Skipping for personal repo {user}/time. Doing later for {org}/notebook. Then notice how in the task list of the original issue testing Github Issue features this task gets automatically checked by the converted issue’s Closed status.\nAdd new label. In this issue converted from a task, assign the Label (right side of issue) to test after you add it by editing the labels.\n\nAdd emoji reaction to one of your own comments. See Add Reactions to Pull Requests, Issues, and Comments | The GitHub Blog.\nPaste a screenshot into a comment. Hint: use keyboard shortcuts on Mac or Windows.\nReference lines of code with a canonical URL. Highlight multiple lines from the index.Rmd in your {user}/time repo by selecting the line number in the left-hand margin (hold shift to select all lines from previously selected line). The highlighted lines show up in yellow and the URL of your browser should update with an HTML anchor to those lines #L29-L31, e.g. https://github.com/bbest/time/blob/main/index.Rmd#L29-L31:\nBy selecting Copy permalink from the ... you can copy into your clipboard the URL to the file resolved to the specific commit, e.g. https://github.com/bbest/time/blob/71383b7952a1f6f0aa00a9cd6906dc8764ba808f/index.Rmd#L29-L31.\nAnother way to get the URL is to use the y Github keyboard shortcut and copy the URL from your browser’s address.\nPaste this URL in a new comment, i.e. the Write tab. Click on Preview. You’ll notice the lines of code show up in the comment.\n\nAnd these persist for this version (or git commit) even as subsequent git commits might change those lines (or even delete the file altogether).\nAdd a fenced R code block. Add multiple lines of R code. See Creating and highlighting code blocks - GitHub Docs and start with r after three backticks instead of ruby.\nMention a Github user on your team. Add a comment referencing another Github user, e.g. @bbest, on your team. See Mentioning people and teams.\nUse emoji in a comment. See Basic writing and formatting syntax - GitHub Docs. \nMention in issue comment another issue that is in the same repo. Simply add in a new comment reference to another issue like #3 . Notice how it gets linked and shows the title on hover.\nMention in issue comment another issue that is in a different repo. now mention an issue in a different repo and different owner altogether, e.g. bbest/eds211-team#21 prefixing with Github {owner}/{repo}. See Autolinked references and URLs - GitHub Docs.\nMention in git commit message issue in the same repo. Make a change in your index.Rmd. It can be as simple as adding a newline or comment somewhere. Be sure to reference the issue # in your git message. Push it and notice how the commit appears in the thread of comments for the issue. Now you can see individual commits showing up based on the timestamp between comments in the thread of the issue. This allows for a back and forth conversation. For instance, by entering the comment + text. fixes #23 in the git commit message (for 2a1d67a):\nOnce you’ve completed all these tasks, Close the issue. Congratulations!\n9.3 Create Issues from Project Tasks in {org}/notebook [lead only]\nCoordinate amongst your project team the creation of Github Issues into {org}/notebook using your original project Tasks from the first lab.\nSince your notebook repo was forked, it by default does not have its own Issues (since assuming you would want to file them in the original repo), but you’ll need to turn these on in the Settings of the repo.\nRefine the Title of each task if something more specific is appropriate now.\nDetail with a Task List parts of the broader Task that could be broken up.\nConvert to issues those Task List items. By creating them this way they are associated with the original broader Task.\nAssign users to the issues.\nInclude issues that are already complete and Close them, adding a screenshot, link, etc summarizing the progress.\n10 Create Github Milestones in {org}/notebook [lead only]\nMilestones allow you to associate a deadline with a cluster of issues. A progress bar shows how many of the issues are closed versus still open. See About milestones - GitHub Docs.\n\nCreate Milestones per your original Lab 1 Deliverables with due dates. Change these to whatever is most appropriate for now.\nNote that Milestones (an older feature) can only reference issues in the same repo, whereas a Project (a newer feature) can reference any repos with the same {owner}. This Milestones feature is expected to be superseded with a Timeline feature in Github (per mention of “timelines (coming soon)”) to probably provide something like a Gantt chart across repos.\n11 Use Github Projects (Beta) [lead only]\nThe new (Beta) Projects allow you to view your issues, even across repos in the same organization, either:\nas a table:\nor as a board:\nThe new table view adds grouping and sorting to the filtering of the existing board view, which is better for viewing prioritization vertically and time or stage horizontally.\n\nFor more, see About projects (beta) - GitHub Docs.\n11.1 Create Project (Beta) Plan under {org}\nCreate a project named Plan for your organization, so under https://github.com/{org} and Projects. Be sure to select New project Beta, not just New project.\n\n11.2 Customize the Plan Project\nSee Quickstart for projects (beta) - GitHub Docs and follow the instructions there for:\nAdding issues to your project. Add all the issues you previously created.\nCreating a field to track priority. Note that you can similarly create any field and list of values to help organize your issues.\nGrouping issues by priority. This is a new table feature that allows you to simply drag and drop issues into a grouping thereby changing its field value to that group.\nSaving the priority view. You can create views with different groupings, filters and more, oh my!\nAdding a board layout. Be sure to set the Status field for each issue first. \nThe original Project board may also be referred to as a Kanban (Wikipedia), or “billboard” in Japanese. By prioritizing all issues vertically and sequencing them in time horizontally, any user can filter by Assignee and answer one of our core questions What do I need to work on next?\n12 Track Time on Github Issues\nAfter installing the Clockify browser extension for Google Chrome, Microsoft Edge or Mozilla Firefox, you should see an extra Start timer link displayed when visiting a Github issue.\n\nClicking on Start timer will start the timer with the title and issue number entered into the Description of the Clockify time entry.\n\nYou can return to the issue to click on the Stop timer link or more directly in the browser extension.\n\n13 Submit Lab via Form [all members]\nPlease submit the links to the Clockify project report and your personal time tracking website on Github via the following Google Form using your UCSB email:\nSubmission for Lab 3. Github\nFurther Reading\nGit & Github\nGitHub Guides\nVersion Control with Git\nHow to Use Git/GitHub with R\nMarkdown in Github\nMastering Markdown · GitHub Guides.\nRStudio with Git & Github\nHappy Git and GitHub for the useR\nChapter 18 Git and GitHub | R Packages\nVersion Control with Git and SVN – RStudio Support\nUsing RStudio Projects – RStudio Support\nRmarkdown\nLesson 1 | Rmarkdown\nGetting started with R Markdown - RStudio\nReproducible Reporting - RStudio\nR Markdown: The Definitive Guide\nRmarkdown websites\n10.5 rmarkdown’s site generator | R Markdown: The Definitive Guide\nCreating websites in R\nMaking free websites with RStudio’s R Markdown\n\n\n\n",
      "last_modified": "2021-11-22T07:15:12-08:00"
    },
    {
      "path": "lab4_roadmap.html",
      "title": "Lab 4. Roadmaps with Zenhub",
      "author": [],
      "contents": "\n\nContents\nLearning Objectives\n1 Create Zenhub Workspace [lead only]\n2 Create Roadmap\n3 Add Roadmap to Website\n4 Submit Lab\nExplore Further\n\nLearning Objectives\nExtend GitHub with ZenHub. Until Github releases its forthcoming Timeline product, Zenhub extends Github functionality for free to create Roadmaps that provide a Gantt chart of a Project progress by Epic, which contain multiple Github Issues. Projects and Epics have start and end dates associated with them in the context of a larger Workspace, which is associated with a set of Github Repos.\nCluster Issues into Epics. By clustering Github Issues into Epics you can also communicate higher level project tasks and progress to non-technical stakeholders.\nCreate Roadmap of Epics in Projects. The Roadmap can only work interactively with team members logged into Zenhub (with their Github logins), but you can export the Roadmap as an image.\nExport Roadmap as image to display on web page. This provides a public view of your project and progress.\n1 Create Zenhub Workspace [lead only]\nChoose a member of your team with admin privileges to your Github organization. Visit zenhub.com, click on Login and Log in using GitHub.\nStart off by creating a workspace, granting Zenhub access to Github repositories and inviting your team to the Zenhub workspace:\nGrant ZenHub third-party access permissions in GitHub. Be sure to follow all instructions under Checking access permissions and for your Github profile (e.g. @bbest), i.e. https://github.com/settings/applications, to ensure your group project’s Github organization has granted ZenHub permissions.\nCreate your First Workspace. Create a workspace named after your Github org {org} workspace.\nNote that the Import Github Projects option is only for the old Github Projects, not the new Github Projects Beta, so only Add repos when Creating a new ZenHub workspace. Be sure to first select your organization in the lower right.\nUpon creation of a workspace you are taken to the default Board view with all open issues in the connected repositories showing up under the New Issues pipeline.\nNote descriptions for the other pipelines like Icebox (low priority issues), Product Backlog (upcoming issues), Sprint Backlog (ready issues for sprint), In Progress, Review/QA, Done.\nInvite your Team to ZenHub.\nBe sure to invite me by sending link to ben@ecoquants.com. Otherwise I will not be able to view (and grade) your workspace.\n2 Create Roadmap\nClick over to the Roadmap menu.\nCreate a new project. You can give it the same name as your {org}. Set the dates to start from when your Lab 1 Gantt chart started, e.g. Nov 1 to Dec 5, 2021.\nAdd epics by clicking the plus sign + next to the project. Create epics that describe the major phases of the project and set start/end dates. To associate Closed issues with an Epic, you might wna\nAdd issues to the epics by going to the Board, selecting issues by clicking on the upper left avatar of the issue to select it and then the Set epic button.\nclicking the linked name of the epic, and in the Epic view click the link to Add issues to this Epic.\nNote that as issues close, the progress meter increments for the associated Epic and Project.\n\n3 Add Roadmap to Website\nYou can share a link to the roadmap, but only members of your team can view it. You can, however, export it as an image.\nExport image of Roadmap with the Share button and save as images/roadmap.svg in your {org}.github.io repo. You might want to prepend the date by a week to get it to show properly on export.\nAdd Roadmap page to website. Create a roadmap web page with this image. Add a menu item for Roadmap to your website. Hints:\nUse the markdown syntax for including an image ![](images/roadmap.svg) in a new Rmarkdown roadmap.Rmd.\nMenu items are determined by your _site.yml. See: 10.5 rmarkdown’s site generator | R Markdown](https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html)).\nYou can rebuild the whole website by either: 1) clicking the Build Website button in the Build pane of RStudio; or 2) running rmarkdown::render_site() in the Console pane.\nBe sure to git push the website and ensure the new page is publicly accessible.\n\n4 Submit Lab\nPlease submit the links to the Zenhub Roadmap and your website page via the following Google Form using your UCSB email:\nSubmission for Lab 4. Roadmap\nExplore Further\nZenHub Support\nCreating GitHub Issue Dependencies using ZenHub\nLet’s Get Started\nWorking with GitHub Issues and ZenHub Epics\nProject planning and sprint management\nReports and gathering insights\nCreating your First Workspace\nGetting started with Epics in ZenHub\nUsing ZenHub Issues, Milestones, and Epics - YouTube\nUsing ZenHub: Team Collaboration and Project Management in GitHub - YouTube\nDrive alignment across your organization with ZenHub Roadmaps\nUsing ZenHub: Roadmaps - YouTube\nUsing ZenHub: Getting Started with GitHub Issues - YouTube\nAn Introduction to ZenHub Epics\nAgile Concepts in GitHub and ZenHub\nWhen to use Checklists, Issues and Epics\nUsing Velocity charts in ZenHub\nCreating Burndown charts in ZenHub using GitHub Milestones\n\n",
      "last_modified": "2021-11-24T04:51:34-08:00"
    },
    {
      "path": "lab5_burndown.html",
      "title": "Lab 5. Burndown",
      "author": [],
      "contents": "\n\nContents\nLearning Objectives\n1 Create Burndown of Hours\n1.1 Assign a Task to each of your time entries\n1.2 Install bbest/clockify\n1.3 Use time_entries_all() in your time repo\n1.4 Use plot_burndown() overall and for each Task\nmy-rad-team\n\n\n2 Interpret Burndown Plots\n3 Submit Lab\nExplore Further\n\nLearning Objectives\nCreate Burndown of Hours Overall and per Task. A burndown chart shows effort expended over time relative to the original estimate. It shows if you’re on track, or perhaps over or under. This provides useful feedback in knowing how the project is progressing for possible repriorizing and/or communicating back with the client. You’ll pull from your Clockify hours to report on burndown overall and per task to generate a burndown chart.\nZenHub Story Points, Burndown, Velocity and Sprints. Story Points are a unitless measure of complexity to apply to issues. The higher the number of Story Points assigned to the issue, the more complex the issue, relative to other issues with a lower number of Story Points. This measure helps in the planning process and subsequent tracking of progress. Sprints are regular, e.g. biweekly, periods over which a set of Issues are assigned for the expectation of fulfilling based on the Story Points associated with Issues and the average number of Story Points accomplished in past Sprints, in other words the Velocity of work completed. Although we don’t have time to go through the cycles of Sprints this quarter, you’re exposed to the concept through the videos from the lecture for possible future application to projects.\n1 Create Burndown of Hours\n1.1 Assign a Task to each of your time entries\nYou’ll be using the Task assigned to each time entry to generate seperate Burndown plots. To ensure a Task is assigned, visit the https://clockify.me > Go to Tracker > Reports > Detailed, filter by Project and Task “Without task”, Apply Filter. Revisit each of these in your Time Tracker to assign it a Task.\n1.2 Install bbest/clockify\nUninstall your existing clockify package and install a newly improved version bbest/clockify that I forked from the original and added functions time_entries_all() and plot_burndown().\n\n\nshow\n\nremove.packages(\"clockify\")\nremotes::install_github(\"bbest/clockify\")\n\n\n\nFeel free to update any packages with more recent versions if prompted.\nIn RStudio, you probably need to refresh your Session > Restart R in order to see the newly created functions (time_entries_all() and plot_burndown()). Otherwise R will complain that it can’t find those functions, meaning it’s still using the old clockify, not bbest/clockify.\n1.3 Use time_entries_all() in your time repo\nRecall in Lab 2. Time that you first used the Clockify API to fetch your time entries and generate a table of those entries in a time repo under your Github user space. In Step 4.4. Create index.Rmd the suggested R chunk for the index.Rmd had a section of R code below the # get data that used the R package clockify’s time_entries() to fetch the data.\nYou’ll want to replace all that code with the use of a new function time_entries_all() that captures all user time entries (based on Step 1.3 Invite Team Members (lead only); not just you, but also your Team members working on the same Project) and includes the Tasks (from Step 1.2 Invite Team Members (lead only)) associated with the time entries.\nExpand the code below to show how it should now look. Also update the libraries loaded with librarian::shelf().\n\n\nshow\n\n# get libraries\nif (!require(librarian)){\n  install.packages(\"librarian\")\n  library(librarian)\n}\nlibrarian::shelf(\n  bbest/clockify,\n  dplyr, DT, ggplot2,\n  quiet = TRUE)\n\n# CHANGE THESE VARIABLES!\napi_txt <- \"~/private/clockify_api-key.txt\"\napi_txt <- \"~/My Drive (ben@ecoquants.com)/private/clockify-api-key_ben@ecoquants.com.txt\"\nproject_name <- \"my-rad-team\"\n\n# use API key to authenticate\nCLOCKIFY_API_KEY <- readLines(api_txt)\nset_api_key(CLOCKIFY_API_KEY)\n\n# get data\nd_times <- time_entries_all()\n# table(d_times$project_name) # confirm project_name\nd_times <- d_times %>%\n  filter(\n    project_name == !!project_name) %>%\n  select(\n    task_name, time_start, duration_hrs, \n    user_name, description) %>% \n  arrange(task_name, time_start)\n\n\n\nBe sure that you replace above with the appropriate values for and:\napi_txt\nyour API key to Clockify; and\nproject_name\nthe exact Project name you input into Clockify. Note there’s a commented out function table(d_times$project_name) that you can run to tabulate the Projects you’ve entered into Clockify (probably only one).\nNote that in the R code chunk above we have only fetched the time entries. Be sure that you are retrieving your time entries by sending d_times to the R Console, e.g. double click d_times to highlight the word in the code and per RStudio’s Code > Run Selected Lines, use keyboard shortcuts Command+Return on a Mac or Ctrl+Enter on a PC. Check before and after using filter() to ensure that your project_name variable is set with a valid value.\nNext, you’ll output those time entries as a Burndown plot and a table per Task and Overall.\n1.4 Use plot_burndown() overall and for each Task\nInstead of a single table of entries like last time, let’s now produce a burndown chart for the whole project along with a table of entries nested in a tab set showing each individual Task in neighboring tabs. See 7.6 Put content in tabs | R Markdown Cookbook.\nAfter the code chunk above getting the data, enter a tabset with your Github organization name corresponding to the project (not my example of my-rad-team):\n## my-rad-team {.tabset}\nThen add a tab for Overall as a subheading (i.e., level 3 ### after setting up a level 2 header ## tabset).\n### Overall\nAnd a code chunk below that using the new plot_burndown() function that uses the ggplot2 library to create a stepped filled area plot and red dashed line for the estimated burn rate.\n\n\nshow\n\n# plot ALL\nplot_burndown(\n  d_times,\n  beg = as.Date(\"2021-10-31\"), # day before\n  end = as.Date(\"2021-11-21\"), # day after\n  hrs = 20)\n\n# table ALL\ndatatable(d_times)\n\n\n\nThen add tabs for each task with a code chunk similar to the Overall tab except for an extra filter() by Task of the data frame d_times to get d_task, i.e. a data frame of time entries specific to that task.\n### 1. Import\n\n\nshow\n\ntask <- \"1. Import\"\nd_task <- d_times %>% \n  filter(task_name == !!task)\nplot_burndown(\n  d_task,\n  beg = as.Date(\"2021-10-31\"), # day before\n  end = as.Date(\"2021-11-08\"), # day after\n  hrs = 10)\n\ndatatable(d_task)\n\n\n\nRepeat for each Task for which you previously estimated hours, per Deliverable in Lab 1. Proposal Step 5 Create Detailed Project Schedule. The chunk for Overall should have an hrs value that is the sum of all the hrs value for all the Tasks.\nNote that For each of these chunks using the plot_burndown() function, be sure to swap out with appropriate values for :\nbeg\nthe beginning date of each Task or for the Project Overall.\nend\nthe end date of each Task or for the Project Overall.\nhrs\nthe estimated hours to complete each Task (or Deliverable) or sum of all Task hrs for the Project Overall.\nYour tabs should look similar (although styled differently from this Distill template) to the following:\n\n\nshow\n\nxaringanExtra::use_panelset()\n\n\n\nmy-rad-team\n\n\nOverall\n\n\nshow\n\n# plot ALL\nplot_burndown(\n  d_times,\n  beg = as.Date(\"2021-10-31\"), # day before\n  end = as.Date(\"2021-11-21\"), # day after\n  hrs = 20)\n\n\n\nshow\n\n# table ALL\ndatatable(d_times)\n\n\n\n{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"],[\"1. Import\",\"1. Import\",\"1. Import\",\"2. Tidy\",\"2. Tidy\",\"2. Tidy\",\"2. Tidy\",\"3. Transform\"],[\"2021-11-01T13:00:00Z\",\"2021-11-01T17:13:00Z\",\"2021-11-02T17:13:00Z\",\"2021-11-08T16:00:00Z\",\"2021-11-10T16:00:00Z\",\"2021-11-12T16:00:00Z\",\"2021-11-19T16:00:00Z\",\"2021-11-12T22:00:00Z\"],[3.5,1.1,1.1,3,3,3,3,5],[\"bdbest\",\"Ben Best\",\"Ben Best\",\"Ben Best\",\"Ben Best\",\"Ben Best\",\"Ben Best\",\"Ben Best\"],[\"finding online data source\",\"import CSV from online\",\"import CSV from online\",\"transformed from wide to long\",\"transformed from wide to long\",\"transformed from wide to long\",\"transformed from wide to long\",\"convert to spatial grid\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>task_name<\\/th>\\n      <th>time_start<\\/th>\\n      <th>duration_hrs<\\/th>\\n      <th>user_name<\\/th>\\n      <th>description<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\n1. Import\n\n\nshow\n\ntask <- \"1. Import\"\nd_task <- d_times %>% \n  filter(task_name == !!task)\nplot_burndown(\n  d_task,\n  beg = as.Date(\"2021-10-31\"), # day before\n  end = as.Date(\"2021-11-08\"), # day after\n  hrs = 10)\n\n\n\nshow\n\ndatatable(d_task)\n\n\n\n{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\"],[\"1. Import\",\"1. Import\",\"1. Import\"],[\"2021-11-01T13:00:00Z\",\"2021-11-01T17:13:00Z\",\"2021-11-02T17:13:00Z\"],[3.5,1.1,1.1],[\"bdbest\",\"Ben Best\",\"Ben Best\"],[\"finding online data source\",\"import CSV from online\",\"import CSV from online\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>task_name<\\/th>\\n      <th>time_start<\\/th>\\n      <th>duration_hrs<\\/th>\\n      <th>user_name<\\/th>\\n      <th>description<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\n2. Tidy\n\n\nshow\n\ntask <- \"2. Tidy\"\nd_task <- d_times %>% \n  filter(task_name == !!task)\nplot_burndown(\n  d_task,\n  beg = as.Date(\"2021-10-31\"), # day before\n  end = as.Date(\"2021-11-15\"), # day after\n  hrs = 5)\n\n\n\nshow\n\ndatatable(d_task)\n\n\n\n{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\"],[\"2. Tidy\",\"2. Tidy\",\"2. Tidy\",\"2. Tidy\"],[\"2021-11-08T16:00:00Z\",\"2021-11-10T16:00:00Z\",\"2021-11-12T16:00:00Z\",\"2021-11-19T16:00:00Z\"],[3,3,3,3],[\"Ben Best\",\"Ben Best\",\"Ben Best\",\"Ben Best\"],[\"transformed from wide to long\",\"transformed from wide to long\",\"transformed from wide to long\",\"transformed from wide to long\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>task_name<\\/th>\\n      <th>time_start<\\/th>\\n      <th>duration_hrs<\\/th>\\n      <th>user_name<\\/th>\\n      <th>description<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\n3. Transform\n\n\nshow\n\ntask <- \"3. Transform\"\nd_task <- d_times %>% \n  filter(task_name == !!task)\nplot_burndown(\n  d_task,\n  beg = as.Date(\"2021-10-31\"), # day before\n  end = as.Date(\"2021-11-21\"), # day after\n  hrs = 5)\n\n\n\nshow\n\ndatatable(d_task)\n\n\n\n{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\"],[\"3. Transform\"],[\"2021-11-12T22:00:00Z\"],[5],[\"Ben Best\"],[\"convert to spatial grid\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>task_name<\\/th>\\n      <th>time_start<\\/th>\\n      <th>duration_hrs<\\/th>\\n      <th>user_name<\\/th>\\n      <th>description<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\n\n\n2 Interpret Burndown Plots\nHow much are you over or under your estimated budget? When did you exceed the budget or stop working on the task? These are the main retrospective questions a burndown plot facilitates visually. Burndown reports are not immediately intuitive, so will require some extra study.\nNotice how the hours used, i.e. “burned” according the black line, may exceed the estimated trajectory by being below the red line or have plenty of extra hours if above.\nRemember that the hours are assigned to the beginning date and the dashed line represents the estimated trajectory of using up hours until hitting zero at the end date. The filled area stepped line of hours then gets decremented (along the y-axis) with each time entry (along the x-axis).\nSo interpreting the examples above:\nThe Overall project is over budget, i.e. exceeds the number of hours estimated since you can see how the final number of hours burned goes below zero, ie the end of the red dashed estimated hours. This Overall project represents the sum of the burndown for all Tasks.\nThe burndown for the 1. Import Task starts off with 10 hours and only uses up 5.7 hours total (add duration_hrs from all time entries in the table below the plot), leaving an excess 4.3 hours under budget. In other words, this Task took less time than originally estimated.\nThe burndown for the 2. Tidy Task starts off with 5 hours, which gets burned through and below by Nov 10. In the end the task is 7 hours over budget.\nThe burndown for the 3. Transform Task starts off with 5 hours, which gets burned up exactly all in one day Nov 12, so the task is exactly on target with budget.\n3 Submit Lab\nPlease use the following Google Form to submit a Link to your web page with Burndown plots and time entry tables for Overall and individual Tasks, i.e. https://{user}.github.io/time:\nSubmit Lab 5. Burndown\nExplore Further\nCreating Burndown charts in ZenHub using GitHub Milestones\nUsing Velocity charts in ZenHub\nCreating GitHub Issue Dependencies using ZenHub\n\n\n\n",
      "last_modified": "2021-11-29T14:05:41-08:00"
    },
    {
      "path": "resources.html",
      "title": "Resources",
      "author": [],
      "contents": "\nAgile Software Development\nbook: Sutherland & Sutherland (2014) Scrum: The Art of Doing Twice the Work in Half the Time by Jeff & J.J. Sutherland\nbook: Sutherland (2019) The Scrum Fieldbook: Faster performance. Better results. Starting now.\n\nGithub Project Management\nGitHub Project Management\n\n\n\n\n",
      "last_modified": "2021-11-08T07:32:30-08:00"
    },
    {
      "path": "wk1_intro.html",
      "title": "`r paste(\"Week\", params$module)`",
      "author": [],
      "contents": "\n\nContents\n0.1 Schedule\n\n0.1 Schedule\n\n\nshow\n\nsource(here::here(\"functions.R\"))\nget_sched() %>% \n  filter(Module == params$module) %>% \n  dt_sched()\n\n\n\n{\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"RowGroup\"],\"data\":[[\"Mon, Nov 1\",\"Wed, Nov 3\"],[\"1. Introduction\",\"1. Introduction\"],[\"<a href='https://docs.google.com/presentation/d/1owziy77lGi2mytXoUDj1kyTJIOSFqrOH7I29yDWFlo8/edit#slide=id.gfca83dc967_0_48' target='_blank'>intro<\\/a>\",\"<a href='https://docs.google.com/presentation/d/1iDL4z1qf68SVZPxx2nTtteyVZqo9jGcic6D8-Sudl50/edit#slide=id.p' target='_blank'>plenary<\\/a>\"],[\"<a href='https://bbest.github.io/eds211-team/lab1_proposal.html'     target='_blank'>proposal<\\/a>\",\"\"],[null,null],[null,null],[\"<a href='https://drive.google.com/file/d/1LJWfJTo4EWcd6Vxyfg7R6GTES-orY-3B/view?usp=sharing'     target='_blank'>Bennett and Gadlin (2012)<\\/a>\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Date<\\/th>\\n      <th>Module<\\/th>\\n      <th>Lecture<\\/th>\\n      <th>Lab<\\/th>\\n      <th>Lab\\nDue<\\/th>\\n      <th>Lab\\nPts<\\/th>\\n      <th>Reading<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"rowGroup\":{\"dataSrc\":1},\"columnDefs\":[{\"visible\":false,\"targets\":1},{\"className\":\"dt-right\",\"targets\":5}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\n\n\n\n",
      "last_modified": "2021-11-08T07:32:32-08:00"
    },
    {
      "path": "wk2_time.html",
      "title": "`r paste(\"Week\", params$module)`",
      "author": [],
      "contents": "\n\nContents\n0.1 Schedule\n\n0.1 Schedule\n\n\nshow\n\nsource(here::here(\"functions.R\"))\nget_sched() %>% \n  filter(Module == params$module) %>% \n  dt_sched()\n\n\n\n{\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"RowGroup\"],\"data\":[[\"Mon, Nov 8\",\"Wed, Nov 10\"],[\"2. Time & Github Org\",\"2. Time & Github Org\"],[\"<a href='https://docs.google.com/presentation/d/1t2GFvnEhKcWrs7lSHk29fdCZBhlqx3vjDe2gtKCnJ_U/edit?usp=sharing' target='_blank'>time<\\/a>\",\"github-org\"],[\"<a href='https://bbest.github.io/eds211-team/lab2_time.html'     target='_blank'>time<\\/a>\",\"github\"],[\"proposal\",\"time\"],[10,5],[\"<a href='https://drive.google.com/file/d/16eswlI2SFQpITD1Oqbi7NPDhTm3Xope4/view?usp=sharing'     target='_blank'>Lowndes et al. (2017)<\\/a>\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Date<\\/th>\\n      <th>Module<\\/th>\\n      <th>Lecture<\\/th>\\n      <th>Lab<\\/th>\\n      <th>Lab\\nDue<\\/th>\\n      <th>Lab\\nPts<\\/th>\\n      <th>Reading<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"rowGroup\":{\"dataSrc\":1},\"columnDefs\":[{\"visible\":false,\"targets\":1},{\"className\":\"dt-right\",\"targets\":5}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\n\n\n\n",
      "last_modified": "2021-11-08T07:32:34-08:00"
    },
    {
      "path": "wk3_github.html",
      "title": "`r paste(\"Week\", params$module)`",
      "author": [],
      "contents": "\n\nContents\n0.1 Schedule\n\n0.1 Schedule\n\n\nshow\n\nsource(here::here(\"functions.R\"))\nget_sched() %>% \n  filter(Module == params$module) %>% \n  dt_sched()\n\n\n\n{\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"RowGroup\"],\"data\":[[\"Mon, Nov 15\",\"Wed, Nov 17\"],[\"3. Github\",\"3. Github\"],[\"github-issues\",\"github-projects\"],[\"github\",\"github\"],[null,null],[null,null],[\"<a href='https://drive.google.com/file/d/1gt0jrZ3Q6HCqSORb7_L24Twj7WiIlCwO/view?usp=sharing'     target='_blank'>Perez-Riverol et al. (2016)<\\/a>\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Date<\\/th>\\n      <th>Module<\\/th>\\n      <th>Lecture<\\/th>\\n      <th>Lab<\\/th>\\n      <th>Lab\\nDue<\\/th>\\n      <th>Lab\\nPts<\\/th>\\n      <th>Reading<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"rowGroup\":{\"dataSrc\":1},\"columnDefs\":[{\"visible\":false,\"targets\":1},{\"className\":\"dt-right\",\"targets\":5}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\n\n\n\n",
      "last_modified": "2021-11-08T07:32:36-08:00"
    },
    {
      "path": "wk4_roadmaps.html",
      "title": "`r paste(\"Week\", params$module)`",
      "author": [],
      "contents": "\n\nContents\n0.1 Schedule\n\n0.1 Schedule\n\n\nshow\n\nsource(here::here(\"functions.R\"))\nget_sched() %>% \n  filter(Module == params$module) %>% \n  dt_sched()\n\n\n\n{\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"RowGroup\"],\"data\":[[\"Mon, Nov 22\",\"Wed, Nov 24\"],[\"4. Roadmaps & Burndown\",\"4. Roadmaps & Burndown\"],[\"roadmap\",\"burndown\"],[\"roadmap\",\"burndown\"],[\"github\",\"roadmap\"],[15,5],[\"<a href='https://drive.google.com/file/d/1ZnAK5c-96B8G_dZkNA3SD6qppEuWz5iA/view?usp=sharing'     target='_blank'>Larson (2019)<\\/a>\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Date<\\/th>\\n      <th>Module<\\/th>\\n      <th>Lecture<\\/th>\\n      <th>Lab<\\/th>\\n      <th>Lab\\nDue<\\/th>\\n      <th>Lab\\nPts<\\/th>\\n      <th>Reading<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"rowGroup\":{\"dataSrc\":1},\"columnDefs\":[{\"visible\":false,\"targets\":1},{\"className\":\"dt-right\",\"targets\":5}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\n\n\n\n",
      "last_modified": "2021-11-08T07:32:38-08:00"
    },
    {
      "path": "wk5_productivity.html",
      "title": "`r paste(\"Week\", params$module)`",
      "author": [],
      "contents": "\n\nContents\n0.1 Schedule\n\n0.1 Schedule\n\n\nshow\n\nsource(here::here(\"functions.R\"))\nget_sched() %>% \n  filter(Module == params$module) %>% \n  dt_sched()\n\n\n\n{\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"RowGroup\"],\"data\":[[\"Mon, Nov 29\",\"Wed, Dec 1\"],[\"5. Productivity & Presentations\",\"5. Productivity & Presentations\"],[\"productivity\",\"presentations\"],[\"[prep presentations]\",\"\"],[\"burndown\",null],[5,null],[\"<a href='https://drive.google.com/file/d/1lZvvLdfzq9xnIpF9fxhVAFWl0laFUB4n/view?usp=sharing'     target='_blank'>Bastille et al. (2021)<\\/a>\",\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Date<\\/th>\\n      <th>Module<\\/th>\\n      <th>Lecture<\\/th>\\n      <th>Lab<\\/th>\\n      <th>Lab\\nDue<\\/th>\\n      <th>Lab\\nPts<\\/th>\\n      <th>Reading<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"rowGroup\":{\"dataSrc\":1},\"columnDefs\":[{\"visible\":false,\"targets\":1},{\"className\":\"dt-right\",\"targets\":5}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\n\n\n\n",
      "last_modified": "2021-11-08T07:32:40-08:00"
    }
  ],
  "collections": []
}
